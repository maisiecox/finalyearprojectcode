# See example 3.2.2.3. to see an image of the graph used and the equivalent adjacency matrix and section 3.2.2. for the steps used in the algorithm
# Let the adjacency matrix here be C
C = [[ 0, 1, 1, 0, 0, 0, 0, 1, 1],
     [ 1, 0, 1, 1, 1, 0, 0, 0, 0],
     [ 1, 1, 0, 1, 0, 1, 0, 0, 0],
     [ 0, 1, 1, 0, 0, 0, 1, 0, 0],
     [ 0, 1, 0, 0, 0, 0, 1, 0, 0],
     [ 0, 0, 1, 0, 0, 0, 1, 0, 0],
     [ 0, 0, 0, 1, 1, 1, 0, 1, 1],
     [ 1, 0, 0, 0, 0, 0, 1, 0, 0],
     [ 1, 0, 0, 0, 0, 0, 1, 0, 0]]
print(C)
[[0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 1, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0]]

# Initialize the vertices in the graph, as letters through the range of the adjacency matrix C
vertex = "abcdefghi"
c={}
for i in range(len(C)):
    c[vertex[i]] = i

    
# Add up the degrees of vertices, so they can be organised from largest to smallest
>>> d = []
>>> for i in range(len(C)):
...     d.append(sum(C[i]))
... 
...     
>>> # Define the four pobbible colours that can be assigned to vertices abcdefghi
>>> colour ={}
>>> for i in range(len(C)):
...     colour[vertex[i]]=["Yellow","Green","Blue","Red"]
... 
...     
>>> # Select the colour such the degrees of vertices is from largest to smallest
>>> sortedvertices=[]
>>> selection=[]
>>> for i in range(len(d)):
...     max_=0
...     j=0
...     for j in range(len(d)):
...         if j not in selection:
...             if d[j]>max_:
...                 max_ = d[j]
...                 g = j
...     selection.append(g)
...     sortedvertices.append(vertex[g])
... 
...     
>>> # Check the suitability and print the solution in the sorted order of the vertices "abcdefghi"
>>> solution={}
>>> for n in sortedvertices:
...     colourset = colour[n]
...     solution[n] = colourset[0]
...     adjacentvertex = C[c[n]]
...     for j in range(len(adjacentvertex)):
...         if adjacentvertex[j]==1 and (colourset[0] in colour[vertex[j]]):
...             colour[vertex[j]].remove(colourset[0])
... 
...             
>>> for a,b in sorted(solution.items()):
...     print("vertex",a,"=",b)
... 
...     
vertex a = Yellow
vertex b = Green
vertex c = Blue
vertex d = Red
vertex e = Blue
vertex f = Green
vertex g = Yellow
vertex h = Green
vertex i = Green
